#!/usr/bin/env python
# -*- coding: utf-8 -*-
import errno
import sys
import fileinput
import argparse


_SEPARATOR = "\t"
_print_header = False

def get_field_index(field, header_fields):
    i = 0
    for hf in header_fields:
        if field == hf:
            return i
        i += 1
    raise "Field not found"

def get_all_fields_indices(fields, header_fields):
    res = []
    for field in fields:
        res.append(get_field_index(field, header_fields))
    return res

def extract_fields_from_line(field_indices, line):
    line = line.rstrip()
    fields = line.split(_SEPARATOR)

    cutted = []
    for index in field_indices:
        if len(fields) > index:
            cutted.append(fields[index])
        else:
            cutted.append("")

    return cutted

def extract_fields_from_lines(target_fields, file_obj):
    global _print_header

    header = file_obj.next()
    header_fields = header.rstrip().split(_SEPARATOR)
    field_indices = get_all_fields_indices(target_fields, header_fields)
    cutted_header = extract_fields_from_line(field_indices, header)

    if _print_header:
        print _SEPARATOR.join(cutted_header)
        _print_header = False

    for line in file_obj:
        cutted = extract_fields_from_line(field_indices, line)
        print _SEPARATOR.join(cutted)

def cut_stdin(target_fields):
    extract_fields_from_lines(target_fields, sys.stdin)

def cut_files(target_fields, input_files):
    for input_file in input_files:
        f = open(input_file)
        try:
            extract_fields_from_lines(target_fields, f)
        finally:
            f.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='hcut')
    parser.add_argument('file', nargs='*')
    parser.add_argument('-f', '--field', action='append')
    parser.add_argument('--header', action='store_true')
    parser.add_argument('--version', action='version', version='%(prog)s 0.1')

    args = parser.parse_args()
    _print_header = args.header
    input_files = args.file
    fields = args.field

    try:
        if len(input_files) == 0:
            cut_stdin(fields)
        else:
            cut_files(fields, input_files)
    except KeyboardInterrupt, e:
        pass
    except IOError, e:
        if e.errno == errno.EPIPE:
            pass

